// CSS Pro Tips 02.01.2021 Notes
@font-face {
  font-family: "Charlie-Display-Regular";
  src: url("../assets/fonts/charlie-display/CharlieDisplay-Regular.woff2");
  font-weight: 400;
}

@font-face {
  font-family: "Charlie-Display-Semibold";
  src: url("../assets/fonts/charlie-display/CharlieDisplay-Semibold.woff2");
  font-weight: 600;
}
/* 1. Use :root for flexible type.
      The type font size in a responsive layout should be able to adjust with each viewport. You can calculate the
      font-size based on the viewport height and width using :root.
*/
:root {
  //font-size: calc(0.5vw + 0.5vh + 0.5vmin);
}


/* 2. Inherit box-sizing.
      Let box-sizing be inherited from html.
      This make it easier to change it when code is introduced through 3rd party plugins or applications that use
      different behavior.
 */
html {
  box-sizing: border-box;
}

*,
*:before,
*:after {
  box-sizing: inherit;
  margin: 0;
  padding: 0;
}


/* 3. Add line-height to body.
      The one thing that leads to inefficient stylesheets is repeating declarations over and over again.
      Line-height is one property you can set for your entire project, not only to minimize lines of code, but to
      enforce a standard look to your site's typography.
      Rather than add line-height to each <p>, <h*> and so on, add it to body.
*/
body {
  // Utilize the root em unit based on the value calculated by :root.
  font: 16px / 1.65 sans-serif;
  margin: 0;
  padding: 0;
  background-color: #ffffff;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif;
}

/* 4. Set font-size on form elements for a better mobile experience.
      To avoid mobile browsers (iOS Safari, et al.) from zooming in on html elements when a <select> dropdown is tapped,
      add font-size to the selector rule.
*/
input[type="text"],
input[type="number"],
input[type="email"],
select,
textarea {
  font-size: 1rem;
}


/* 5. Set :focus for form elements.
      Sighted keyboard users rely on focus to determine where keyboard events go in the page.
      Make focus for form elements stand out and consistent then a browser's default implementation.
 */
a,
button,
input,
textarea {
  &:focus {
    box-shadow: none;
    outline: #000000 dotted 2px;
    outline-offset: 0.05em;
  }
}


/* 6. Style broken images.
      Broken images happen for a number of reasons and are either unsightly or lead to confusion (just and empty element).
 */
img {
  display: block;
  height: auto;
  position: relative;
  width: 100%;

  &:before {
    content: "We're sorry, the image is missing.";
    display: block;
    margin-bottom: 20px;
  }

  &:after {
    content: "(url: 'attr(src)')";
    display: block;
    font-size: 0.25rem;
  }
}

code {
  font-size: 12px;
  font-family: SFMono-Medium, "SF Mono", "Segoe UI Mono", "Roboto Mono", "Ubuntu Mono", Menlo, Consolas, Courier, monospace;
  color: #172B4D;
  white-space: pre-wrap;
  background: #F4F5F7;
  line-height: 1.6;
  display: inline-block;
  padding: 2px 6px;
  border-radius: 2px;
}

/**
* Margin and padding utility classes
*/

// Define increments (pixels) and directions needed.
$increments: (0, 4, 8, 12, 16, 20, 24, 32, 40, 48, 56, 64, 72, 80, 88, 102, 118, 124, 136, 148);
$directions: (top, bottom, left, right);

// Loop through the increments and directions.
@each $increment in $increments {
  @each $direction in $directions {
    .m#{str-slice($direction, 0, 1)}-#{$increment} {
      margin-#{$direction}: #{$increment}px;
    }

    .p#{str-slice($direction, 0, 1)}-#{$increment} {
      padding-#{$direction}: #{$increment}px;
    }
  }
}

@mixin generate-width($unit, $step-count, $max-range) {
  @if $unit == px {
    @for $i from 1 through $max-range {
      @if ($i % $step-count == 0) {
        .width-#{$i + $unit} {
          width: #{$i + $unit};
        }
      }
    }
  } @else if $unit == per {
    @for $i from 1 through $max-range {
      .width-#{$i + $unit} {
        width: #{$i + "%"};
      }
    }
  }
}

@include generate-width($unit: per, $step-count: 1, $max-range: 100);
@include generate-width($unit: px, $step-count: 5, $max-range: 1920);
